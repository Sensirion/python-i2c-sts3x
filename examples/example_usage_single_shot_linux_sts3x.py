#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2023 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:     sensirion-driver-generator 0.33.0
# Product:       sts3x
# Model-Version: 1.0.0
#

import argparse
import time
from sensirion_i2c_driver import LinuxI2cTransceiver, I2cConnection, CrcCalculator
from sensirion_driver_adapters.i2c_adapter.i2c_channel import I2cChannel
from sensirion_i2c_sts3x.device import Sts3xDevice
from sensirion_i2c_sts3x.commands import (Repeatability)


parser = argparse.ArgumentParser()
parser.add_argument('--i2c-port', '-p', default='/dev/i2c-1')
args = parser.parse_args()

with LinuxI2cTransceiver(args.i2c_port) as i2c_transceiver:
    channel = I2cChannel(I2cConnection(i2c_transceiver),
                         slave_address=0x4A,
                         crc=CrcCalculator(8, 0x31, 0xff, 0x0))
    sensor = Sts3xDevice(channel)
    try:
        sensor.stop_measurement()
        time.sleep(0.001)
    except BaseException:
        ...
    try:
        sensor.soft_reset()
        time.sleep(0.1)
    except BaseException:
        ...
    a_status_register = sensor.read_status_register()
    print(f"a_status_register: {a_status_register}; "
          )
    for i in range(50):
        try:
            a_temperature = sensor.measure_single_shot(Repeatability.MEDIUM, False)
            print(f"a_temperature: {a_temperature}; "
                  )
        except BaseException:
            continue

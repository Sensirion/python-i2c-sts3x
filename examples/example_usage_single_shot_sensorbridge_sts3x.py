#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2023 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:     sensirion-driver-generator 0.33.0
# Product:       sts3x
# Model-Version: 1.0.0
#

import argparse
import time
from sensirion_i2c_driver import I2cConnection, CrcCalculator
from sensirion_shdlc_driver import ShdlcSerialPort, ShdlcConnection
from sensirion_shdlc_sensorbridge import (SensorBridgePort,
                                          SensorBridgeShdlcDevice,
                                          SensorBridgeI2cProxy)
from sensirion_driver_adapters.i2c_adapter.i2c_channel import I2cChannel
from sensirion_i2c_sts3x.device import Sts3xDevice
from sensirion_i2c_sts3x.commands import (Repeatability)


parser = argparse.ArgumentParser()
parser.add_argument('--serial-port', '-p', default='COM1')
args = parser.parse_args()

with ShdlcSerialPort(port=args.serial_port, baudrate=460800) as port:
    bridge = SensorBridgeShdlcDevice(ShdlcConnection(port), slave_address=0)
    bridge.set_i2c_frequency(SensorBridgePort.ONE, frequency=100e3)
    bridge.set_supply_voltage(SensorBridgePort.ONE, voltage=3.3)
    bridge.switch_supply_on(SensorBridgePort.ONE)
    i2c_transceiver = SensorBridgeI2cProxy(bridge, port=SensorBridgePort.ONE)
    channel = I2cChannel(I2cConnection(i2c_transceiver),
                         slave_address=0x4A,
                         crc=CrcCalculator(8, 0x31, 0xff, 0x0))
    sensor = Sts3xDevice(channel)
    try:
        sensor.stop_measurement()
        time.sleep(0.001)
    except BaseException:
        ...
    try:
        sensor.soft_reset()
        time.sleep(0.1)
    except BaseException:
        ...
    a_status_register = sensor.read_status_register()
    print(f"a_status_register: {a_status_register}; "
          )
    for i in range(50):
        try:
            a_temperature = sensor.measure_single_shot(Repeatability.MEDIUM, False)
            print(f"a_temperature: {a_temperature}; "
                  )
        except BaseException:
            continue
